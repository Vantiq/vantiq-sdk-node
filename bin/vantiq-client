#!/usr/bin/env node

//
// Command Line Interface Application for Vantiq SDK
//
var fs     = require('fs');
var path   = require('path');
var stream = require('stream');
var vorpal = require('vorpal')();
var Vantiq = require('../index');
var mime   = require('mime');

//
// Instance of the SDK
//
var vantiq = null;

//
// Function that first checks to see if the CLI has connected
// to the server.  If not, then issue a warning, else run
// the action handler.
//
function ensureConnected(action) {
    return function(args, cb) {
        try {
            if(vantiq && vantiq.isAuthenticated()) { 
                action.bind(this)(args, cb);
            } else {
                this.log("Please connect to the server before issuing requests to the server.");
                cb();
            }
        } catch(err) {
            // If an exception is thrown, then just print it out and get back to the command line
            this.log(err);
            cb();
        }
    };
}

//
// Parse the string into an object assuming it is a definition of a JavaScript object
// that can be 'eval'ed to create the object.  This may be any legal JS type, 
// Object, Array, Primitive
//
function parseArg(arg) {
    return eval("'use strict'; var x = " + arg + "; x ;");
}

//
// Commands
//
vorpal
    .command('connect <server> <username> <password>')
    .description('Connects to the specified server with the given credentials.')
    .action(function(args, cb) {
        vantiq = new Vantiq({
            server: args.server,
            apiVersion: 1,
        });
        vantiq.authenticate(args.username, args.password)
            .then(()     => { this.log("Connection succeeded with " + args.server);   cb(); })
            .catch((err) => { this.log(err); cb(); });
    });

vorpal
    .command('connect-token <server> <accessToken>')
    .description('Connects to the specified server using the given access token.')
    .action(function(args, cb) {
        vantiq = new Vantiq({
            server: args.server,
            apiVersion: 1,
        });
        vantiq.accessToken = args.accessToken;
        cb();
    });

vorpal
    .command('access-token')
    .description('Prints out the current access token.')
    .action(function(args, cb) {
        this.log(vantiq.accessToken);
        cb();
    });

vorpal
    .command('select <type> [props] [where] [sort]')
    .description('Selects data for a given type with optional constraints in JSON form')
    .action(ensureConnected(function(args, cb) {
        var where = parseArg(args.where);
        var props = parseArg(args.props);
        var sort  = parseArg(args.sort);
        vantiq.select(args.type, props, where, sort)
            .then((result) => { this.log(JSON.stringify(result, null, 2)); cb(); })
            .catch((err)   => { this.log(err);                             cb(); });
    }));

vorpal
    .command('selectOne <type> <id>')
    .description('Selects a single record using the given id')
    .action(ensureConnected(function(args, cb) {
        vantiq.selectOne(args.type, args.id)
            .then((result) => { this.log(JSON.stringify(result, null, 2)); cb(); })
            .catch((err)   => { this.log(err);                             cb(); });
    }));

vorpal
    .command('count <type> [where]')
    .description('Counts the number of records for a given type with where clause in JSON form')
    .action(ensureConnected(function(args, cb) {
        var where = parseArg(args.where);
        vantiq.count(args.type, where)
            .then((result) => { this.log(result); cb(); })
            .catch((err)   => { this.log(err);    cb(); });
    }));

vorpal
    .command('insert <type> <file>')
    .description('Inserts one or more records into the given type using the given JSON file')
    .action(ensureConnected(function(args, cb) {
        fs.readFile(args.file, 'utf8', (err, data) => {
            if(err) {
                this.log(err);
                cb();
            } else {
                vantiq.insert(args.type, JSON.parse(data))
                    .then((result) => { this.log(JSON.stringify(result, null, 2)); cb(); })
                    .catch((err)   => { this.log(err);                             cb(); });                
            }
        });
    }));

vorpal
    .command('update <type> <key> <file>')
    .description('Updates the given record identified by the key for the given type using the given JSON file')
    .action(ensureConnected(function(args, cb) {
        fs.readFile(args.file, 'utf8', (err, data) => {
            if(err) {
                this.log(err);
                cb();
            } else {
                vantiq.update(args.type, args.key, JSON.parse(data))
                    .then((result) => { this.log(JSON.stringify(result, null, 2)); cb(); })
                    .catch((err)   => { this.log(err);                             cb(); });                
            }
        });
    }));

vorpal
    .command('upsert <type> <file>')
    .description('Inserts or updates the given record for the given type using the given JSON file')
    .action(ensureConnected(function(args, cb) {
        fs.readFile(args.file, 'utf8', (err, data) => {
            if(err) {
                this.log(err);
                cb();
            } else {
                vantiq.upsert(args.type, JSON.parse(data))
                    .then((result) => { this.log(JSON.stringify(result, null, 2)); cb(); })
                    .catch((err)   => { this.log(err);                             cb(); });                
            }
        });
    }));

vorpal
    .command('delete <type> <where>')
    .description('Deletes one or more records identified by the given constraint')
    .action(ensureConnected(function(args, cb) {
        var where = parseArg(args.where);        
        vantiq.delete(args.type, where)
            .then((result) => { this.log('Delete succeeded.'); cb(); })
            .catch((err)   => { this.log(err);                 cb(); });
    }));

vorpal
    .command('deleteOne <type> <id>')
    .description('Deletes a single record with the given id')
    .action(ensureConnected(function(args, cb) {
        vantiq.deleteOne(args.type, args.id)
            .then((result) => { this.log('Delete succeeded.'); cb(); })
            .catch((err)   => { this.log(err);                 cb(); });
    }));

vorpal
    .command('publish <topic> <file>')
    .description('Publishes a message in the given file onto the given topic')
    .action(ensureConnected(function(args, cb) {
        fs.readFile(args.file, 'utf8', (err, data) => {
            if(err) {
                this.log(err);
                cb();
            } else {
                vantiq.publish("topics", args.topic, JSON.parse(data))
                    .then((result) => { this.log('Publish succeeded.'); cb(); })
                    .catch((err)   => { this.log(err);                  cb(); });                
            }
        });
    }));


vorpal
    .command('execute <procedure> [params]')
    .description('Executes the named procedure with optional arguments in JSON form')
    .action(ensureConnected(function(args, cb) {
        var params = (args.params ? parseArg(args.params) : {});
        return vantiq.execute(args.procedure, params)
            .then((result) => { 
                this.log(JSON.stringify(result, null, 2)); 
                cb(); 
            })
            .catch((err) => { 
                this.log(err);
                cb(); 
            });

    }));

vorpal
    .command('evaluate <analyticsModel> [params]')
    .description('Evaluates the named analytics model with input parameters as a JSON object')
    .action(ensureConnected(function(args, cb) {
        var params = (args.params ? parseArg(args.params) : {});
        return vantiq.evaluate(args.analyticsModel, params)
            .then((result) => { 
                this.log(JSON.stringify(result, null, 2)); 
                cb(); 
            })
            .catch((err) => { 
                this.log(err);
                cb(); 
            });

    }));

vorpal
    .command('query <source> [params]')
    .description('Queries the named source with the given parameters in JSON form')
    .action(ensureConnected(function(args, cb) {
        var params = (args.params ? parseArg(args.params) : {});
        return vantiq.query(args.source, params)
            .then((result) => { 
                this.log(JSON.stringify(result, null, 2)); 
                cb(); 
            })
            .catch((err) => { 
                this.log(err);
                cb(); 
            });

    }));

vorpal
    .command('subscribe <resource> <name> [operation]')
    .description('Subscribe to events listening in real-time')
    .action(ensureConnected(function(args, cb) {

        // Create callback that prints the message to the console.
        var callback = (msg) => {
            var prefix = '[' + args.resource + '/' + args.name;
            if(args.operation) {
                prefix += '/' + args.operation;
            }
            prefix += '] ';
            var str = prefix + JSON.stringify(msg, null, 2);
            this.log(str);
        };

        var p = null;
        if(args.resource === 'types') {
            p = vantiq.subscribe(args.resource, args.name, args.operation, callback);
        } else {
            p = vantiq.subscribe(args.resource, args.name, callback);
        }

        return p.then((result) => {
                this.log("Subscription Successful");
                cb();
            })
            .catch((err) => {
                this.log(err);
                cb();
            });
    }));

vorpal
    .command('unsubscribe')
    .description('Unsubscribes to all events and closes the WebSocket')
    .action(ensureConnected(function(args, cb) {
        vantiq.unsubscribeAll();
        cb();
    }));

vorpal
    .command('upload <filePath> [documentPath] [contentType]')
    .description('Uploads the given file.  If no documentPath is given, the base filename is used.  If no contentType is given, it is determined via node-mime.')
    .action(ensureConnected(function(args, cb) {
        var contentType = args.contentType;
        if(!contentType) {
            contentType = mime.lookup(args.filePath);
        }
        var documentPath = args.documentPath;
        if(!documentPath) {
            documentPath = path.basename(args.filePath);
        }
        return vantiq.upload(args.filePath, contentType, documentPath)
            .then((result) => {
                this.log(JSON.stringify(result, null, 2));
                cb();
            })
            .catch((err) => {
                this.log(err);
                cb();
            });
    }));

vorpal
    .command('download <contentPath> [filePath]')
    .description('Download the given file.  If no filePath is specified, the file is printed to the console.')
    .action(ensureConnected(function(args, cb) {
        return vantiq.download(args.contentPath)
            .then((result) => {
                if(args.filePath) {
                    result.pipe(fs.createWriteStream(args.filePath));
                } else {
                    var vorpalStream = new stream.Writable();
                    vorpalStream._write = (chunk, encoding, done) => {
                        this.log(chunk.toString());
                        done();
                    };
                    result.pipe(vorpalStream);
                }
                cb();
            })
            .catch((err) => {
                this.log(err);
                cb();
            });
    }));

//
// Start the command line.  If a command was present on the CLI command
// line, it will be executed.
//
var pkgInfo = require('../package.json');

vorpal
    .log('Vantiq NodeJS SDK v' + pkgInfo.version)
    .delimiter('> ')
    .parse(process.argv)
    .history('Vantiq-NodeJS-SDK-CLI')
    .show();
